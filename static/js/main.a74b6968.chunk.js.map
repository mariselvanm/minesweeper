{"version":3,"sources":["components/CreateTable.jsx","components/Model.jsx","containers/Mindsweeper/GameController/index.jsx","components/SelectBox.jsx","containers/Mindsweeper/index.jsx","containers/index.jsx","App.js","serviceWorker.js","index.js"],"names":["createTable","props","tableContent","tablecontent","map","row","rowIndex","react_default","a","createElement","key","_","columnIndex","cellObj","value","addBombClass","isShow","isFlaged","showAllResult","isBomb","bombCount","className","concat","onClick","clickListener","onContextMenu","event","rightclickListener","model","show","children","click","GAMESTATE","start","loose","win","GameController","state","bombLocations","gridCellValues","showGameEndResult","gameState","flagedElements","isModelShow","resetState","_this","setState","handelUserInput","createBombLocations","levelValue","level","length","randomTwoDigitNumber","Math","floor","random","includes","push","createInitialArray","console","log","Object","toConsumableArray","cellObject","isEmpty","column","gridArray","Array","fill","forEach","bombCountForCell","cellObjectDeepCopy","objectSpread","concatRowColum","index","handelCellRightClick","stateObjDeepCopy","gridCellValuesCopy","flagedElementsCopy","flagBoolean","indexOfFlagedElement","indexOf","splice","findWinOrLoose","preventDefault","bombLocationsCopy","location","indexOfLocationElement","allElementShown","cell","handleCellClick","emptyBoxArray","returnValues","revelAroundEmptyNodes","emptyArrayCatcher","this","prevProps","prevState","_this2","checkBoxStatus","el","split","winOrloose","components_Model","components_CreateTable","Component","selectBox","selectDivDOM","selectUlDOM","levels","elObj","onChange","change","type","id","name","checked","defaultLevel","htmlFor","aria-hidden","tabIndex","src","alt","GAMELEVELS","Index","gameStart","gameLevel","showTime","seconds","minutes","handleOnChange","clearInterval","setIntervalValue","resetTimer","setInterval","updateTimer","handleUserInput","copyState","components_SelectBox","containers_Mindsweeper_GameController","Mindsweeper","App","src_containers","Boolean","window","hostname","match","ReactDOM","render","src_App","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.a74b6968.chunk.js","sourcesContent":["import React from 'react';\nimport './CreateTable.scss';\n\nconst createTable = props => {\n\n    let tableContent = props.tablecontent.map((row, rowIndex) => {\n        return <tr key={rowIndex}>\n            {\n                row.map((_, columnIndex) => {\n                    let cellObj = props.tablecontent[rowIndex][columnIndex];\n                    let value = null;\n                    let addBombClass = '';\n\n                    if ((cellObj.isShow && !cellObj.isFlaged) || props.showAllResult) {\n                        if (cellObj.isBomb) {\n                            value = '';\n                            addBombClass = 'showBombs ';\n                        } else {\n                            value = cellObj.bombCount ? cellObj.bombCount : null;\n                        }\n                    }\n\n                    let className = props.showAllResult ? 'show '.concat(addBombClass) : \n                                    ''.concat(cellObj.isShow ? 'show ' : '',\n                                    cellObj.isFlaged ? 'flaged ' : '');\n\n                    return <td \n                        className={className}\n                        onClick={\n                            !props.showAllResult ? \n                            () => props.clickListener(cellObj) :\n                            null\n                        }\n                        onContextMenu={\n                            !props.showAllResult ? \n                            (event) => props.rightclickListener(cellObj, event) :\n                            null\n                        }\n                        key={''+rowIndex+columnIndex}>{value}</td>\n                })\n            }\n        </tr>\n    });\n\n    return(\n        <table className=\"gameTableContainer\">\n            <tbody>\n                {tableContent}\n            </tbody>\n        </table>\n    );\n}\n\nexport default createTable;","import React from 'react';\nimport './Model.scss';\n\nconst model = props => {\n    return (\n        <div className={\"Model \".concat(props.show ? \"showModel\":\"hideModel\")}>\n            <div>{props.children}</div>\n            <button onClick={props.click}>Close</button>\n        </div>\n    )\n}\n\nexport default model;","import React, { Component } from 'react';\nimport CreateTable from '../../../components/CreateTable';\nimport './index.scss';\nimport Model from '../../../components/Model';\n\nconst GAMESTATE = {\n    start: 0,\n    loose: 1,\n    win: 2\n}\n\nclass GameController extends Component {\n    state = {\n        bombLocations: null,\n        gridCellValues: null,\n        showGameEndResult: false,\n        gameState: GAMESTATE.start,\n        flagedElements: [],\n        isModelShow:false,\n    }\n\n    componentDidMount() {\n        this.createBombLocations();\n    }\n\n    componentDidUpdate(prevProps, prevState) {\n        if (prevProps.level !== this.props.level) {\n            this.resetState();\n        }\n    }\n\n    resetState = () => {\n        this.setState({\n            bombLocations: null,\n            gridCellValues: null,\n            showGameEndResult: false,\n            gameState: GAMESTATE.start,\n            isModelShow: false\n        }, this.props.handelUserInput);\n    }\n\n    createBombLocations = () => {\n        let bombLocations = [];\n        let levelValue = this.props.level;\n\n        while(bombLocations.length !== this.props.level) {\n            let firstDigit = Math.floor(Math.random() * levelValue) + 0;\n            let secondDigit = Math.floor(Math.random() * levelValue) + 0;\n            let randomTwoDigitNumber = '' + firstDigit + secondDigit;\n            \n            // Check index already present\n            if (!bombLocations.includes(randomTwoDigitNumber)) {\n                bombLocations.push(randomTwoDigitNumber);\n            }\n        }\n        \n        // Use callback function as a second argument\n        this.setState({\n            bombLocations: bombLocations\n        }, this.createInitialArray);\n\n        console.log(bombLocations);\n    }\n\n    createInitialArray = () => {\n        let bombLocations = [...this.state.bombLocations];\n        let levelValue = this.props.level;\n        let cellObject = {\n            isBomb: false,\n            isEmpty: true,\n            row: 0,\n            column: 0,\n            isShow: false,\n            isFlaged: false,\n        };\n\n        let gridArray = Array(levelValue).fill('').map(_ => {\n            return Array(levelValue).fill('as');\n        });\n        \n        //Push Object into Array Cells\n        gridArray.forEach( (row, rowIndex) => {\n            row.forEach( (column, columnIndex) => {\n                let bombCountForCell = 0;\n                let cellObjectDeepCopy = {...cellObject};\n                let concatRowColum = '' + rowIndex + columnIndex;\n                let isBomb = bombLocations.includes(concatRowColum) ? true : false;\n\n                cellObjectDeepCopy.row = rowIndex;\n                cellObjectDeepCopy.column = columnIndex;\n                cellObjectDeepCopy.isBomb = isBomb;\n\n                if (!isBomb) {\n                    // Check top left\n                    if ( rowIndex-1 >=0 && columnIndex-1 >= 0) {\n                        let index = '' + (rowIndex-1) + (columnIndex-1);\n                        \n                        if (bombLocations.includes(index)) {\n                            bombCountForCell++;\n                        }\n                    }\n\n                    // Check top center\n                    if (rowIndex-1 >= 0) {\n                        let index = '' + (rowIndex-1) + columnIndex;\n                        \n                        if (bombLocations.includes(index)) {\n                            bombCountForCell++;\n                        }\n                    }\n\n                    // Check top right\n                    if (rowIndex-1 >= 0 && columnIndex+1 < this.props.level) {\n                        let index = '' + (rowIndex-1) + (columnIndex+1);\n                        \n                        if (bombLocations.includes(index)) {\n                            bombCountForCell++;\n                        }\n                    }\n\n                    // Check left\n                    if (columnIndex-1 >= 0) {\n                        let index = '' + rowIndex + (columnIndex-1);\n                        \n                        if (bombLocations.includes(index)) {\n                            bombCountForCell++;\n                        }\n                    }\n\n                    // Check right\n                    if (columnIndex+1 < this.props.level) {\n                        let index = '' + rowIndex + (columnIndex+1);\n                        \n                        if (bombLocations.includes(index)) {\n                            bombCountForCell++;\n                        }\n                    }\n\n                    // Check bottom left\n                    if (rowIndex+1 < this.props.level && columnIndex-1 >= 0) {\n                        let index = '' + (rowIndex+1) + (columnIndex-1);\n                        \n                        if (bombLocations.includes(index)) {\n                            bombCountForCell++;\n                        }\n                    }\n\n                    // Check bottom center\n                    if (rowIndex+1 < this.props.level) {\n                        let index = '' + (rowIndex+1) + columnIndex;\n                        \n                        if (bombLocations.includes(index)) {\n                            bombCountForCell++;\n                        }\n                    }\n\n                    // Check bottom right\n                    if (rowIndex+1 < this.props.level && columnIndex+1 < this.props.level) {\n                        let index = '' + (rowIndex+1) + (columnIndex+1);\n                        \n                        if (bombLocations.includes(index)) {\n                            bombCountForCell++;\n                        }\n                    }\n\n                    cellObjectDeepCopy.bombCount = bombCountForCell;\n\n                    if (bombCountForCell) {\n                        cellObjectDeepCopy.isEmpty = false;\n                    }\n                }\n\n                gridArray[rowIndex][columnIndex] = cellObjectDeepCopy;\n            });\n        });\n\n        this.setState({\n            gridCellValues: gridArray\n        })\n    }\n\n    handelCellRightClick = (cellObj, event) => {\n        let stateObjDeepCopy = {...this.state};\n        let gridCellValuesCopy = stateObjDeepCopy.gridCellValues;\n        let flagedElementsCopy = stateObjDeepCopy.flagedElements;\n        let flagBoolean = gridCellValuesCopy[cellObj.row][cellObj.column].isFlaged;\n        gridCellValuesCopy[cellObj.row][cellObj.column].isFlaged = !flagBoolean;\n        gridCellValuesCopy[cellObj.row][cellObj.column].isShow = !flagBoolean;\n        \n        if (!flagBoolean) {\n            flagedElementsCopy.push(''+ cellObj.row + cellObj.column);\n        } else {\n            let indexOfFlagedElement = flagedElementsCopy.indexOf(''+ cellObj.row + cellObj.column);\n            flagedElementsCopy.splice(indexOfFlagedElement, 1);\n        }\n        \n        this.setState({\n            gridCellValues: gridCellValuesCopy,\n            flagedElements: flagedElementsCopy\n        }, this.findWinOrLoose);\n        \n        event.preventDefault();\n    }\n\n    findWinOrLoose = () => {\n        let stateObjDeepCopy = {...this.state};\n        let gridCellValuesCopy = stateObjDeepCopy.gridCellValues;\n        let flagedElementsCopy = stateObjDeepCopy.flagedElements;\n        let bombLocationsCopy = stateObjDeepCopy.bombLocations;\n\n        // Check all bombs are flaged\n        if ( flagedElementsCopy.length >= bombLocationsCopy.length ) {\n            bombLocationsCopy.forEach(location => {\n                if(flagedElementsCopy.includes(location)) {\n                    let indexOfLocationElement = flagedElementsCopy.indexOf(location);\n                    flagedElementsCopy.splice(indexOfLocationElement, 1);\n                }\n            });\n        }\n\n        if (flagedElementsCopy.length === 0) {\n            let allElementShown = true;\n            // Check all spots are in shown state\n            gridCellValuesCopy.forEach(row => {\n                row.forEach(cell => {\n                    if (!cell.isShow) {\n                        allElementShown = false;\n                    }\n                });\n            });\n\n            if (allElementShown) {\n                this.setState({\n                    showGameEndResult: true,\n                    gameState: GAMESTATE.win,\n                    isModelShow: true\n                });\n\n                return;\n            }\n        }\n    }\n\n    handleCellClick = cellObj => {\n        debugger;\n        if (cellObj.isShow) {\n\n            return;\n        }\n\n        if (cellObj.isBomb) {     \n            this.setState({\n                showGameEndResult: true,\n                gameState: GAMESTATE.loose,\n                isModelShow: true\n            });\n            \n            return;\n        }\n        \n        let stateDeepCopy = {...this.state};\n        let gridCellValuesCopy = stateDeepCopy.gridCellValues;\n\n        if (cellObj.bombCount) {\n            cellObj.isShow = true;\n            gridCellValuesCopy[cellObj.row][cellObj.column] = cellObj;\n            this.setState({\n                gridCellValues: gridCellValuesCopy\n            }, this.findWinOrLoose);\n        } else {\n            let emptyBoxArray = [ cellObj.row +'_'+ cellObj.column];\n           \n            while(emptyBoxArray.length) {\n                let returnValues = this.revelAroundEmptyNodes(emptyBoxArray, gridCellValuesCopy);\n                emptyBoxArray = [...returnValues.emptyArrayCatcher];\n            }\n\n            this.setState({\n                gridCellValues: gridCellValuesCopy\n            }, this.findWinOrLoose);\n        }\n    }\n\n    revelAroundEmptyNodes(emptyBoxArray, gridCellValuesCopy) {\n        let emptyArrayCatcher = [];\n\n        let checkBoxStatus = (rowIndex, columnIndex) => {\n            let cell = gridCellValuesCopy[rowIndex][columnIndex];\n\n            if (!cell.isBomb && !cell.isShow && cell.isEmpty) {\n                emptyArrayCatcher.push( (rowIndex) +'_'+ (columnIndex));\n            } else {\n                cell.isShow = true;\n            }\n        };\n\n        emptyBoxArray.forEach(el => {\n            let rowIndex = +el.split('_')[0];\n            let columnIndex = +el.split('_')[1];\n            \n            gridCellValuesCopy[rowIndex][columnIndex].isShow = true;\n\n            // Check top left\n            if ( rowIndex-1 >=0 && columnIndex-1 >= 0) {\n                checkBoxStatus(rowIndex-1, columnIndex-1);\n            }\n\n            // Check top center\n            if (rowIndex-1 >= 0) {\n                checkBoxStatus(rowIndex-1, columnIndex);\n            }\n\n            // Check top right\n            if (rowIndex-1 >= 0 && columnIndex+1 < this.props.level) {\n                checkBoxStatus(rowIndex-1, columnIndex+1);\n            }\n\n            // Check left\n            if (columnIndex-1 >= 0) {\n                checkBoxStatus(rowIndex, columnIndex-1);\n            }\n\n            // Check right\n            if (columnIndex+1 < this.props.level) {\n                checkBoxStatus(rowIndex, columnIndex+1);\n            }\n\n            // Check bottom left\n            if (rowIndex+1 < this.props.level && columnIndex-1 >= 0) {\n                checkBoxStatus(rowIndex+1, columnIndex-1);\n            }\n\n            // Check bottom center\n            if (rowIndex+1 < this.props.level) {\n                checkBoxStatus(rowIndex+1, columnIndex);\n            }\n\n            // Check bottom right\n            if (rowIndex+1 < this.props.level && columnIndex+1 < this.props.level) {\n                checkBoxStatus(rowIndex+1, columnIndex+1);\n            }\n        });\n\n        return { emptyArrayCatcher, gridCellValuesCopy};\n    }\n\n    render() {\n        let winOrloose = this.state.gameState === GAMESTATE.loose ?\n                         <Model \n                            show={this.state.isModelShow}\n                            click={this.resetState}> You Loose </Model> : \n                         this.state.gameState === GAMESTATE.win ?\n                         <Model \n                            show={this.state.isModelShow} \n                            click={this.resetState} > You Win </Model> : null;\n\n        return (\n            <div className=\"gameController\">\n                {this.state.gridCellValues ? \n                    <CreateTable \n                        clickListener={this.handleCellClick}\n                        showAllResult={this.state.showGameEndResult}\n                        tablecontent={this.state.gridCellValues} \n                        rightclickListener={this.handelCellRightClick}/> :\n                    null\n                }\n                {winOrloose}              \n            </div>\n        )\n    }\n}\n\nexport default GameController;","import React from 'react';\nimport './SelectBox.scss';\n\nconst selectBox = props => {\n    let selectDivDOM = [];\n    let selectUlDOM = [];\n\n    props.levels.forEach( (elObj, key) => {\n        selectDivDOM.push(<div className=\"select-box__value\" key={elObj.level}>\n            <input onChange={() => props.change(elObj.value)} className=\"select-box__input\" type=\"radio\" id={elObj.level} value={elObj.value} name=\"Ben\" checked={props.defaultLevel === elObj.value ? true : false}/>\n            <p className=\"select-box__input-text\">{elObj.level}</p>\n        </div>);\n\n        selectUlDOM.push(<li key={elObj.level}>\n             <label className=\"select-box__option\" htmlFor={elObj.level} aria-hidden=\"true\">{elObj.level}</label>\n        </li>);\n    });\n\n    return (\n        <div className=\"select-box\">\n        <div className=\"select-box__current\" tabIndex=\"1\">\n            {selectDivDOM}\n            <img className=\"select-box__icon\" src=\"http://cdn.onlinewebfonts.com/svg/img_295694.svg\" alt=\"Arrow Icon\" aria-hidden=\"true\"/>\n        </div>\n        <ul className=\"select-box__list\">\n            {selectUlDOM}\n        </ul>\n        </div>\n    );\n};\n\nexport default selectBox;","import React, { Component } from 'react';\nimport GameController from './GameController';\nimport SelectBox from '../../components/SelectBox';\n\nconst GAMELEVELS = [\n    { level: 'Easy',  value: 8},\n    { level: 'Medium',  value: 10},\n    { level: 'Hard',  value: 12},\n];\n\nclass Index extends Component {\n    state = {\n        gameStart : false,\n        gameLevel : GAMELEVELS[0].value,\n        showTime: {\n            seconds: '00',\n            minutes: '00'\n        },\n    }\n\n    handleOnChange = levelValue => {\n        this.setState({\n            gameLevel: +levelValue,\n        }, () => {\n            if (this.state.gameStart) {\n                clearInterval(this.setIntervalValue);\n                this.resetTimer();\n                this.setIntervalValue = setInterval(this.updateTimer , 1000);\n            }\n        });\n    }\n\n    handleUserInput = () => {\n        this.setState((prevState, prevProps) => {\n            return {\n                gameStart: !prevState.gameStart\n            };\n        }, () => {\n            if (this.state.gameStart) {\n                this.setIntervalValue = setInterval(this.updateTimer , 1000);\n            } else {\n                clearInterval(this.setIntervalValue);\n                this.resetTimer();\n            }\n        });\n    }\n\n    resetTimer = () => {\n        this.setState({\n            showTime: {\n                seconds: '00',\n                minutes: '00'\n            }\n        });\n    }\n\n    updateTimer = () => {\n        let copyState = {...this.state};\n        let seconds = +(copyState.showTime.seconds) + 1;\n        let minutes = +(copyState.showTime.minutes);\n\n        if (seconds >= 60) {\n            minutes++;\n            seconds = 0;\n        }\n\n        if (seconds < 10) {\n            seconds = '0' + seconds;\n        }\n\n        if (minutes < 10) {\n            minutes = '0' + minutes;\n        }\n\n        this.setState({\n            showTime: {\n                seconds: seconds,\n                minutes: minutes\n            }\n        });\n    }\n\n    render() {\n        return(\n            <div className=\"user-input-panel\">\n                <SelectBox \n                    levels={GAMELEVELS} \n                    change={this.handleOnChange}\n                    defaultLevel={this.state.gameLevel} />\n                <div className=\"gameInfo\">\n                    <span className=\"bombCount\">{this.state.gameLevel}</span>\n                    <button onClick={this.handleUserInput}>{this.state.gameStart ? \"Reset\" : \"Start\" }</button>\n                    <span>{this.state.showTime.minutes}:{this.state.showTime.seconds}</span>\n                </div>\n                {this.state.gameStart ? \n                    <GameController \n                        level={this.state.gameLevel}\n                        handelUserInput={this.handleUserInput}/> :\n                    null\n                }\n            </div>\n        );\n    }\n}\n\nexport default Index;","import React, { Component } from 'react';\nimport MindsweeperIndex from './Mindsweeper';\nimport './index.scss';\n\nclass Index extends Component {\n    render() {\n        return (\n            <div className=\"game-logic-contanier\">\n                <MindsweeperIndex />\n            </div>\n        );\n    }\n}\n\nexport default Index;","import React from 'react';\nimport Index from './containers';\nimport './App.css';\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <Index />\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}